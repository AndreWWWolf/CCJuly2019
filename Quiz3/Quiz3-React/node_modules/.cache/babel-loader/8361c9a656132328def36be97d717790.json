{"ast":null,"code":"const BASE_URL = \"http://localhost:3000\";\nexport const Posts = {\n  all() {\n    return fetch(\"\".concat(BASE_URL, \"/posts\"), {\n      credentials: 'include'\n    }).then(res => {\n      return res.json();\n    });\n  },\n\n  find(id) {\n    return fetch(\"\".concat(BASE_URL, \"/posts/\").concat(id), {\n      credentials: \"include\"\n    }).then(res => {\n      return res.json();\n    });\n  },\n\n  create(params) {\n    return fetch(\"\".concat(BASE_URL, \"/posts\"), {\n      method: \"POST\",\n      credentials: \"include\",\n      headers: {\n        'Content-Type': \"application/json\"\n      },\n      body: JSON.stringify(params)\n    }).then(res => {\n      return res.json();\n    });\n  },\n\n  update(params, id) {\n    return fetch(\"\".concat(BASE_URL, \"/posts/\").concat(id), {\n      method: \"PATCH\",\n      credentials: \"include\",\n      headers: {\n        'Content-Type': \"application/json\"\n      },\n      body: JSON.stringify(params)\n    }).then(res => {\n      return res.json();\n    });\n  },\n\n  destroy(id) {\n    return fetch(\"\".concat(BASE_URL, \"/posts/\").concat(id), {\n      method: \"DELETE\",\n      credentials: \"include\"\n    }).then(res => res.json());\n  }\n\n};\nexport const Session = {\n  create(params) {\n    return fetch(\"\".concat(BASE_URL, \"/sessions\"), {\n      method: \"POST\",\n      credentials: \"include\",\n      headers: {\n        'Content-Type': \"application/json\"\n      },\n      body: JSON.stringify(params)\n    }).then(res => {\n      return res.json();\n    });\n  },\n\n  destroy() {\n    return fetch(\"\".concat(BASE_URL, \"/sessions\"), {\n      method: \"DELETE\",\n      credentials: \"include\"\n    }).then(res => {\n      return res.json();\n    });\n  }\n\n};\nexport const User = {\n  current() {\n    return fetch('http://localhost:3000/current_user', {\n      credentials: \"include\"\n    }).then(res => res.json());\n  }\n\n};","map":{"version":3,"sources":["/Users/andrewwolf/Codecore/JulyBootcamp/Quiz3/Quiz3-React/src/api/requests.js"],"names":["BASE_URL","Posts","all","fetch","credentials","then","res","json","find","id","create","params","method","headers","body","JSON","stringify","update","destroy","Session","User","current"],"mappings":"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","sourcesContent":["const BASE_URL = \"http://localhost:3000\"\n\nexport const Posts = {\n  all() {\n    return fetch(`${BASE_URL}/posts`, {\n      credentials: 'include'\n    })\n    .then(res => {\n      return res.json();\n    });\n  },\n  find(id) {\n    return fetch(`${BASE_URL}/posts/${id}`, {\n      credentials: \"include\"\n    })\n    .then(res => {\n      return res.json();\n    });\n  },\n  create(params) {\n    return fetch(`${BASE_URL}/posts`, {\n      method: \"POST\",\n      credentials: \"include\",\n      headers: {\n        'Content-Type': \"application/json\"\n      },\n      body: JSON.stringify(params)\n    })\n    .then(res => {\n      return res.json();\n    })\n  },\n  update(params, id) {\n    return fetch(`${BASE_URL}/posts/${id}`, {\n      method: \"PATCH\",\n      credentials: \"include\",\n      headers: {\n        'Content-Type': \"application/json\"\n      },\n      body: JSON.stringify(params)\n    })\n    .then(res => {\n      return res.json();\n    })\n  },\n  destroy(id) {\n    return fetch(`${BASE_URL}/posts/${id}`, {\n      method: \"DELETE\",\n      credentials: \"include\"\n    }).then(res => res.json())\n  }\n}\n\nexport const Session = {\n  create(params) {\n    return fetch(`${BASE_URL}/sessions`, {\n      method: \"POST\",\n      credentials: \"include\",\n      headers: {\n        'Content-Type': \"application/json\"\n      },\n      body: JSON.stringify(params)\n    })\n    .then(res => {\n      return res.json();\n    })\n  },\n  destroy() {\n    return fetch(`${BASE_URL}/sessions`, {\n      method: \"DELETE\",\n      credentials: \"include\"\n    })\n    .then(res => {\n      return res.json();\n    })\n  }\n}\n\nexport const User = {\n  current() {\n    return fetch('http://localhost:3000/current_user', {\n      credentials: \"include\"\n    })\n    .then(res => res.json())\n  }\n}"]},"metadata":{},"sourceType":"module"}